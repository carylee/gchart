<?php
// $Id$

/**
  * @file
  * Drupal Module: gchart
  * Provides custom functionality for building gchart
 */

/**
 * Implementation of hook_init()
 */
/*function gchart_init() {
  drupal_add_js( drupal_get_path('module', 'gchart') . '/js/gchart.js');
}*/
require_once( drupal_get_path('module', 'gchart') . '/gchart.php');

function pr( $something ) {
  echo "<pre>";
  print_r($something);
  echo "</pre>";
  }

/**
  * Generates a pie chart based on a taxonomy vocabulary id
  * Pass the vocabulary ID, a possible array of IDs to skip, and an options array
  * $options should be of the form array( 'name'=>'value' );
  * All values should be provided in quotes and all options are optional
  * Parameters include:
  * width, height, title, xlabel, ylabel, is3D, legend, legendFontSize, titleFontSize
  * enableTooltip, tooltipFontSize, tooltipHeight, tooltipWidth, pieJoinAngle, pieMinimalAngle
  * See explanation of options: http://code.google.com/apis/visualization/documentation/gallery/piechart.html
  */

function gchart_pieChart($vid, $skip=array(), $options=array()) {
  drupal_set_html_head('<script type="text/javascript" src="http://www.google.com/jsapi"></script>');
  $data = gchart_restructure( gchart_get_data( $vid, $skip ) );
  $ch = new GChart( $data, $options );
  $ch->divName = 'chart_div';
  $js = $ch->makeChart();
  drupal_add_js( $js, 'inline', 'header', FALSE, FALSE, FALSE );
  echo $ch->makeDiv();
}

function gchart_restructure( $data ) {
  $labelsValues = array();
  foreach( $data as $datum ) {
    $labelsValues[ $datum['name'] ] = $datum['count'];
  }

  return $labelsValues;
}


function gchart_get_data( $vid, $skip=array() ) {
  $vocab = taxonomy_vocabulary_load($vid);
	$vname = $vocab->name;
	$extendedValues = array();
	$children = gchart_gettaxtree_nonnull($vid, $skip);
	$numChildren = count($children);
	foreach ($children as $term) {
		$currentChild++;
		$currChildName = $term->name;
		$currChildID = $term->tid;
		//$fullDataArray[$currentChild]['count'] = taxonomy_term_count_nodes($term->tid);
		$realData = views_get_view_result(chart_views, block_2, $currChildID);
		$nodeCount = count($realData);
		$fullDataArray[$currentChild]['name'] = $currChildName;
		$fullDataArray[$currentChild]['id'] = $currChildID;
		$fullDataArray[$currentChild]['count'] = $nodeCount;
    //echo '<p>$currChildID = ' . $currChildID . ' and $nodeCount = ' . $nodeCount. '</p>';
	}
  usort($fullDataArray, "gchart_cmp");
  return $fullDataArray;
}


// From Chris' Code
function gchart_gettaxtree_nonnull($vid, $skip=''){
	$children = taxonomy_get_children(arg(2), $vid);
      if(!$children) {
        $custom_parent = taxonomy_get_parents(arg(2));
          $parent_tree = array();
          foreach ($custom_parent as $custom_child => $key) {
            $parent_tree = taxonomy_get_tree($vid, $key->tid);
          }
          $children = $parent_tree;
      }
   	foreach ($children as $key => $value){
   		
   		$nodeCount = taxonomy_term_count_nodes($value->tid);
		if ($nodeCount == 0){
			unset($children[$key]);
			
		} else {
		}
		if($value->tid == $skip[0]){
			unset($children[$key]);
		} else {
		}
	}
	$children = array_values($children);
    return $children;
}
/**
 * Sorts array by node count.
 */
function gchart_cmp($a, $b)
{
    if ($a['count'] == $b['count']) {
        return 0;
    }
    return ($a['count'] > $b['count']) ? -1 : 1;
}
